name: V8 Build

on:
    push:
        branches:
        - master
        - workflow/v8upgrade
        paths:
        - deps/latest_v8_hash
    workflow_dispatch:
    workflow_call:
        inputs:
            sha:
                description: "The commit to check out at. Defaults to the parent workflow's github.sha."
                required: false
                type: string
        outputs:
            sha:
                description: The resulting SHA commitish.
                value: ${{ jobs.release.outputs.sha }}

jobs:
    build_common:
        name: Build Architecture Independent Files
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
                  ref: ${{ inputs.sha }}

            - name: Update to latest V8
              run: |
                  latest_v8_hash="$(<deps/latest_v8_hash)"
                  cd deps/v8
                  git fetch --depth=1 origin "$latest_v8_hash"
                  git checkout "$latest_v8_hash"

            - name: Create include files
              run: cd deps && ./build_common.py

            - name: Upload include/ Artifacts
              uses: actions/upload-artifact@v4
              with:
                  # The name matches the directory under deps/.
                  name: include
                  if-no-files-found: error
                  path: deps/include/
                  retention-days: 2

    build:
        name: Build V8 for ${{ matrix.os }} ${{ matrix.arch }}
        strategy:
            fail-fast: false
            matrix:
                os: [android, darwin, linux]
                arch: [amd64, arm64]
                include:
                    - os: android
                      platform: ubuntu-latest
                    - os: linux
                      platform: ubuntu-latest
                    - os: darwin
                      platform: macos-latest
        runs-on: ${{ matrix.platform }}
        steps:
            - name: Install g++-aarch64-linux-gnu
              if: matrix.os == 'linux' && matrix.arch == 'arm64'
              run: sudo apt update && sudo apt install g++-aarch64-linux-gnu -y

            - name: Install setuptools
              if: matrix.platform == 'macos-latest'
              run: python3 -m pip install --upgrade setuptools
              env:
                # https://stackoverflow.com/a/76469774
                PIP_BREAK_SYSTEM_PACKAGES: '1'

            - name: Install CCache
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -yq ccache
                  sudo update-ccache-symlinks

                  echo "/usr/lib/ccache" >> "$GITHUB_PATH"

            - name: Install CCache
              if: matrix.platform == 'macos-latest'
              run: |
                  brew install ccache

                  echo "$(brew --prefix ccache)/libexec" >> "$GITHUB_PATH"

            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
                  ref: ${{ inputs.sha }}

            - name: Update to latest V8
              run: |
                  latest_v8_hash="$(<deps/latest_v8_hash)"
                  cd deps/v8
                  git fetch --depth=1 origin "$latest_v8_hash"
                  git checkout "$latest_v8_hash"

            - name: Configure CCache
              run: |
                  ccacheDir="$HOME/.ccache"
                  mkdir -p "$ccacheDir"
                  echo "CCACHE_DIR=$ccacheDir" >> "$GITHUB_ENV"
                  echo "CCACHE_CPP2=yes" >> "$GITHUB_ENV"
                  echo "CCACHE_SLOPPINESS=time_macros" >> "$GITHUB_ENV"

            - name: Restore CCache
              uses: actions/cache@v4
              with:
                  path: ~/.ccache
                  key: libv8:ccache:${{ matrix.os }}:${{ matrix.arch }}:${{ hashFiles('deps/v8_hash') }}:${{ runner.os }}
                  restore-keys: |
                      libv8:ccache:${{ matrix.os }}:${{ matrix.arch }}:
                      ${{ runner.os }}:${{ matrix.os }}:${{ matrix.arch }}:libv8:ccache

            - name: Restore V8 Build Cache
              uses: actions/cache@v4
              with:
                  path: deps/v8/build
                  key: libv8:v8build:${{ matrix.os }}:${{ matrix.arch }}:${{ hashFiles('deps/v8_hash') }}:${{ runner.os }}
                  restore-keys: |
                      libv8:v8build:${{ matrix.os }}:${{ matrix.arch }}:

            - name: Update depot_tools fetch config
              run: cd deps/depot_tools && git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*

            - name: Build V8 (${{ matrix.os }})
              run: cd deps && ./build.py --ccache --verbose --arch ${{ matrix.arch }} --os ${{ matrix.os }}

            - name: Show CCache Status
              run: ccache -s

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  # The name matches the directory under deps/.
                  name: ${{ matrix.os }}_${{ matrix.arch }}
                  if-no-files-found: error
                  path: |
                      deps/${{ matrix.os }}_${{ matrix.arch }}/
                      !deps/${{ matrix.os }}_${{ matrix.arch }}/vendor.go
                  retention-days: 2

    commit:
        name: Commit Built Artifacts
        needs: [build, build_common]
        runs-on: ubuntu-latest
        outputs:
            committed: ${{ steps.commit.outputs.committed }}
            sha: ${{ steps.commit.outputs.commit_long_sha }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
                  ref: ${{ inputs.sha }}

            - id: update_v8
              name: Update to latest V8
              run: |
                  latest_v8_hash="$(<deps/latest_v8_hash)"
                  echo "$latest_v8_hash" >deps/v8_hash

                  cd deps/v8
                  git fetch --depth=1 origin "$latest_v8_hash"
                  # --tags is slow, so we do it separately for debugability.
                  git fetch --tags origin
                  # V8 also adds a <version>-pgo tag we don't care about.
                  latest_v8_version="$(git tag --points-at "$latest_v8_hash" | grep -v -- '-pgo' | head -n1)"
                  git checkout "${latest_v8_version:-$latest_v8_hash}"
                  echo "latest_v8_version=${latest_v8_version:-$latest_v8_hash}" >>"$GITHUB_OUTPUT"

            - name: Remove old static libraries
              run: "find deps -maxdepth 2 -type f -name libmanifest | xargs -rn1 dirname | xargs -r rm -fr"

            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: deps

            - name: Update LDFLAGS in cgo.go
              run: ./deps/update_cgo.py

            - name: Update Changelog
              run: |
                  ./tools/modifychangelog.py \
                    --unchanged '- Auto-bumped V8 .*' \
                    --changed "- Auto-bumped V8 to ${{ steps.update_v8.outputs.latest_v8_version }}." \
                    --inplace \
                    CHANGELOG.md

            - id: commit
              name: Commit
              uses: EndBug/add-and-commit@v9
              with:
                  add: |
                      - cgo.go
                      - CHANGELOG.md
                      - deps/*_*/libv8*.a
                      - deps/*_*/libmanifest
                      - deps/include/**
                      - deps/depot_tools
                      - deps/v8
                      - deps/v8_hash
                  fetch: false
                  message: |
                      Add built V8 libraries at ${{ steps.update_v8.outputs.latest_v8_version }}

                      Auto-generated by GitHub workflow v8build.

            - name: Create Summary
              if: ${{ steps.commit.outputs.committed == 'true' }}
              run: |
                  echo "V8 Commit: $(<deps/latest_v8_hash)" >>"$GITHUB_STEP_SUMMARY"
                  echo "V8 Version: ${{ steps.update_v8.outputs.latest_v8_version }}" >>"$GITHUB_STEP_SUMMARY"
                  echo "Commit: https://github.com/tommie/v8go/commit/${{ steps.commit.outputs.commit_long_sha }}" >>"$GITHUB_STEP_SUMMARY"

            - name: Create Summary (no upgrade)
              if: ${{ steps.commit.outputs.committed != 'true' }}
              run: |
                  echo "No commit necessary." >>"$GITHUB_STEP_SUMMARY"

    syncsubdeps:
        name: Run Sync Submodule Dependencies
        needs: commit
        if: ${{ needs.commit.outputs.committed == 'true' }}
        uses: ./.github/workflows/syncsubdeps.yml
        with:
            sha: ${{ needs.commit.outputs.sha }}

    release:
        name: Make A Release
        needs: [commit, syncsubdeps]
        if: ${{ needs.commit.outputs.committed == 'true' }}
        uses: ./.github/workflows/release.yml
        with:
          draft: false
          version: '+0.1.0'
          sha: ${{ needs.syncsubdeps.outputs.sha }}
